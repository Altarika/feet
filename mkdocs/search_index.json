{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to feet\n\n\nFast Entitiy Extraction Tool\n\n\n\n\n\n\n\n\n\n\nComplete documentation coming soon!\n\n\nOverview\n\n\nFeet is a tool for extracting entities from a text according to dictionaries.\nA dictionary gathers terms that are representative of an entity type, e.b. city, country, people or company.\n\n\nFeet takes benefits of the distributed in-memory database system \nRedis\n.\nSo It's fast and scalable.\n\n\nThe underlying natural language processing is provided by Python NLTK package.\nJapanese has been implemented thanks to the Mecab POS tagger.\n\n\nOn-going work for next version:\n\n\n\n\nbetter project packaging and documentation\n\n\nmore testing\n\n\nimplement various technics for disambiguition of entities by semantics\nanalysis including the use of thesauri and machine learning.\n\n\ncompliant to JSON API interface\n\n\ndefinition of relationships between entities according to grammatical patterns including but not only the definition of intents, facts etc.\n\n\nadditional languages support: Chinese and Korean\n\n\n\n\nAs a bonus, there is a function to extract dates from text in Japanese. Next\nversion may feature a multi-lingual dates extraction function.\n\n\nLast but not the least this is WIP so rely on it at your own risk. We should\nget a reliable version within a few weeks, along with new exciting features.\n\n\nQuick Start\n\n\nfeet supports Python versions 2.7+ and pypy.\n\n\nInstalling Python\n\n\nInstall \nPython\n by downloading an installer appropriate for your system from\n\nhttps://www.python.org/downloads/\n and running it.\n\n\nInstalling pip\n\n\nIf you're using a recent version of Python, pip is most likely installed\nby default. However, you may need to upgrade pip to the lasted version:\n\n\n$ pip install --upgrade pip\n\n\n\n\nIf you need to install [pip] for the first time, download [get-pip.py].\nThen run the following command to install it:\n\n\n$ python get-pip.py\n\n\n\n\nQuick start\n\n\nCheck your locals\n\n\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nSetup Redis\n\n\nUse of \nRedis\n is mandatory and v3+ is recommended. \n\n\nSetup Mecab for Japanese\n\n\nSetup \nMeCaB\n\n\nYou can either use ipadic-utf8 dictionary or neologd dictionary:\n\n\n\n\napt-get install mecab-ipadic-utf8\n\n\nSetup \nneologd dictionary\n\n\n\n\nSetup Feet\n\n\nDownload latest version of Feet repository.\n\n\n$ git clone https://github.com/Altarika/feet.git\n$ cd feet\n$ python setup.py install\n\n\n\n\nor from pip (TODO):\n\n\n$ pip install feet\n\n\n\n\nFor development\n\n\nCreate a virtualenv and install dependencies\n\n\n$ virtualenv venv\n$ source venv/bin/activate\n\n\n\n\n$ echo $(pwd) \n project_venv/lib/python2.7/site-packages/feet.pth\n\n\n\n\nInstall Python dependencies\n\n\n$ pip install -r requirements.txt\n\n\n\n\nCheck the changelog:\n\n\n$ git log --oneline --decorate --color\n\n\n\n\nSetup NLTK\n\n\nDepending on the languages you want to use you have to download the necessary\ndata for NLTK to support them. Please see the documentation of \nNLTK\n.\nWe are using NLTK version 3.0.\n\n\n$ python -m nltk.downloader averaged_perceptron_tagger maxent_ne_chunker maxent_treebank_pos_tagger punkt words\n\n\n\n\n\nConfiguration\n\n\nSetup your environment parameters in feet.yaml after copying config/feet_example.yaml\n\n\nYou can locate the configuration file at: \n/etc/feet.yml\n~/.feet.yaml\nconf/feet.yaml\n\n\nContent of configuration file:\n\n\n# Basic Flags\ndebug: true\n\n# Logging Information\nlogfile: 'feet.log'\nloglevel: 'DEBUG'\n\n# Timeout processing\ntimeout: 180\n\n# Redis database Information\ndatabase:\n    host: localhost\n    port: 6379\n    prefix: feet\n\n# API Server\nserver:\n    host: 127.0.0.1\n    port: 8000\n\n# Japanese POS Tagger MeCab\nmecab:\n    mecabdict= 'usr/local/lib/mecab/dic/mecab-ipadic-neologd'\n\n\n\n\nYou can also use a .env file:\n\n\nMECAB_DICT=/usr/local/lib/mecab/dic/mecab-ipadic-neologd\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_DICT_DB=0\nREDIS_PREFIX=feet\nDEBUG=True\nSERVER_HOST=localhost\nSERVER_PORT=8888\nLOG_FILE=feet.log\nLOG_LEVEL=INFO\nTIMEOUT=180\n\n\n\n\nIf both a YAML and a .env file are available, YAML file will override common\nenvironment variables.\n\n\nTesting\n\n\nRun the tests to make sure everything is OK.\n\n\n$ pip install ./requirements/test.txt\n$ nosetests -v --with-coverage --cover-package=feet --cover-inclusive --cover-erase tests ./feet/www/tests/\n\n\n\n\nor with Tornado testing tools:\n\n\n$ python -m tornado.testing  discover\n\n\n\n\nor with setuptools\n\n\n$ python setup.py test\n\n\n\n\nRead the doc\n\n\nYou can generate a documentation with mkdocs tool.\n\n\nInstall the mkdocs package using pip:\n\n\n$ pip install mkdocs\n\n\n\n\nInstall Yeti theme from mkdocs-bootswatch: \n\n\n$ pip install mkdocs-bootswatch\n\n\n\n\nYou should now have the mkdocs command installed on your system. \nRun mkdocs --version to check that everything worked okay.\n\n\n$ mkdocs --version\nmkdocs, version 0.15.2\n\n\n\n\nLaunch the documentation server:\n\n\n$ mkdocs serve\n\n\n\n\nThen open your browser on http://127.0.0.1:8000/\n\n\nCLI\n\n\nFollow the Quick Start instructions. Make sure a redis-server is running.\nMake and update your favorite configuration file (.env or yml).\n\n\nFrom feet directory you can use \n$ ./bin/feet\n command or you can directly\ncall \n$ feet\n if you have been through complete installation via setuptools.\n\n\nLoad\n entity file with CLI:\n\n\n$ feet load --registry=my_registry --entity=country --csv=./tests/test_data/countries_en.csv\n\n\n\n\nDrop\n list of terms for company with CLI:\n\n\n$ feet drop --registry=my_registry --entity=country\n\n\n\n\nExtract\n entities from a text:\n\n\n$ feet extract --registry=my_registry --entity=country --grammar=\nNE : {\nNNP|NNPS|NN\n*\nDT\n?\nNNP|NNPS|JJ|NNS|NN\n+}\n --path=./tests/test_data/english_text_long.txt \n\n\n\n\nor\n\n\n$ feet extract --registry=my_registry --entity=country --grammar=\nNE : {\nNNP|NNPS|NN\n*\nDT\n?\nNNP|NNPS|JJ|NNS|NN\n+}\n --text=\nI want to buy flight tickets for Japan\n \n\n\n\n\nHTTP API server tools\n\n\nFollow the Quick Start instructions. Make sure a redis-server is running.\nMake and update your favorite configuration file (.env or yml).\n\n\nFrom feet directory you can use \n$ ./bin/feet\n command or you can directly\ncall \n$ feet\n if you have been through complete installation via setuptools.\n\n\nFeet run !\n\n\nLaunch the server:\n\n\n$ feet run --host=127.0.0.1 --port=8888 \n\n\n\n\nFeet proposes a Restful API. It's easy to guess where you are from the url. In order\nto manage your entities you can group them into different databases,\nprefixes and registries. The database identifier follows Redis rule. A prefix and a registry can be any\nalphanumeric urlencoded characters strings.\n\n\nGet list of registries\n\n\ncurl -H \nAccept: application/json\n -X GET http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\n--\n 200 {\nregistries\n:[\nregistry1\n,\nregistry2\n]}\n\n\n\n\nAdd a registry\n\n\ncurl -H \nContent-Type: application/json\n -X POST http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/\n--\n 200 OK\n\n\n\n\nDelete a registry\n\n\ncurl -H \nContent-Type: application/json\n -X DELETE http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/\n--\n 200 OK\n\n\n\n\nGet list of registered entities\n\n\ncurl -H \nAccept: application/json\n -X GET http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\n\n\n\n\nExample:\n\n\nhttp://localhost:8888/database/0/prefix/geographic/registry/my_registry/entities/\n--\n 200 {\nentities\n:[\ncity\n,\ncountry\n]}\n\n\n\n\nAdd an entity\n\n\ncurl -H \nContent-Type: application/json\n -X POST http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/\n--\n 200 OK\n\n\n\n\nDelete an entity\n\n\ncurl -H \nContent-Type: application/json\n -X DELETE http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/\n--\n 200 OK\n\n\n\n\nGetting an entity provides the list of languages supported by the entity\n\n\ncurl -H \nAccept: application/json\n -X GET http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/\n--\n 200 {\nlanguages\n:[\nenglish\n]}\n\n\n\n\nAdd a language for an entity\n\n\ncurl -H \nContent-Type: application/json\n -X POST http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/\n--\n 200 OK\n\n\n\n\nThe list of language identifiers that we use comes from NLTK. You must follow\nthis list if you want feet to branch correctly into NLTK. \n\n\nDelete a language for an entity\n\n\ncurl -H \nContent-Type: application/json\n -X DELETE http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/\n--\n 200 OK\n\n\n\n\nGeting a language provides the number of terms for this language\n\n\ncurl -H \nAccept: application/json\n -X GET http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/\n--\n 200 {\ncount\n:249}\n\n\n\n\nThis allows to get the total number of terms for a language.\n\n\nChange the name of language\n\n\ncurl -H \nContent-Type: application/json\n -X PUT -d '{\nnew_name\n: \nenglish\n}'\nhttp://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/\n--\n 200 OK \n\n\n\n\nCreate/add list of terms\n\n\ncurl -H \nContent-Type: application/json\n -X POST/PUT -d '{\nentities\n: [\nParis\n,\nTokyo\n]}' http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/terms/\n--\n 200 OK\n\n\n\n\nGet list of terms for an entity and a language\n\n\ncurl -H \nAccept: application/json\n -X GET -d '{\npage\n:0,\ncount\n:10}' http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/terms/?page=0\ncount=10\n--\n 200 {\nterms\n:[\nParis\n,\nTokyo\n]}\n\n\n\n\nDelete all terms for an entity and a language\n\n\ncurl -H \nContent-Type: application/json\n -X DELETE -d '{\nentities\n: [\nParis\n]}' http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/entities/\nentity_name\n/languages/\nlang_id\n/terms/\n--\n 200 OK\n\n\n\n\nGet a term\n\n\ncurl -H \nAccept: application/json\n -X GET http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/terms/Tokyo/\n--\n 200 Tokyo\n\n\n\n\nAdd a term\n\n\ncurl \nContent-Type: application/json\n -X POST  http://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/terms/Tokyo/\n--\n 200 OK\n\n\n\n\nDelete a term\n\n\ncurl \nContent-Type: application/json\n -X DELETE \nhttp://localhost:8888/database/\ndatabase\n/prefix/\nprefix_name\n/registries/\nregistry\n/entities/\nentity_name\n/lang/\nlang_id\n/terms/Tokyo/\n--\n 200 OK\n\n\n\n\nExtract entities from a text\n\n\ncurl -H \nAccept: application/json\n -H \nContent-Type: application/json\n -X POST -d '{\ntest\n:\nI am looking for tickets for Tokyo in Japan\n, \ngrammar\n:\nNE : {\nNNP|NNPS|NN\n*\nDT\n?\nNNP|NNPS|JJ|NNS|NN\n+}\n}'\nhttp://localhost:8888/database/0/prefix/geographic/entities/city/languages/english/extract/\n--\n 200 {\nresult\n:[\nTokyo\n]}\n\n\n\n\nTODO: Search for entities\n\n\ncurl -H \nAccept: application/json\n -H \nContent-Type: application/json\n -X GET\nhttp://localhost:8888/database/0/prefix/geographic/entities/city/languages/english/search?q=Tok\npage=0\ncount=10\n--\n 200 {\nresult\n:[\nTokyo\n]}\n\n\n\n\nHow to use\n\n\nFollow the quick start installation.\n\n\nUsing Feet relies on three classes:\n\n\n\n\nRegistry\n\n\nDictionary\n\n\nExtractor\n\n\n\n\n(Don't forget to run a Redis server)\n\n\nKey prefix\n\n\nBefore talking about the classes it's important to explain the concept of key\nprefix. As we are using a Redis database to store all data they can be organized\nby a key prefix. It means that all keys used to store information about\nregistries, dictionaries etc. will be prefixed. It provides you with a first\nlevel of organisation for your data.\n\n\n+------------------------------------+\n|  +-------------------------------+ |\n|  |  +--------------------------+ | |\n|  |  |                          | | |\n|  |  |     Term                 | | |\n|  |  |                          | | |\n|  |  | Entity/Dictionary        | | |\n|  |  +--------------------------+ | |\n|  |Registry                       | |\n|  +-------------------------------+ |\n|Key prefix                          |\n+------------------------------------+\n\n\n\n\nRegistries\n\n\nEach registry manages a list of dictionaries. It's a second level of\norganisation after key prefixes.\n\n\nGet the list of registries for a specific key prefix:\n\n\nfrom feet.entities.registry import Registry\n\nregistries = Registry.list(key_prefix='my_prefix')\n\n\n\n\nAdd a registry:\n\n\nfrom feet.entities.registry import Registry\n\nregistry = Registry.find_or_create('my_registry',\n    key_prefix='my_prefix',\n    redis_host='127.0.0.1',\n    redis_port=6379,\n    redis_db=0)\n\n\n\n\nGet the list of dictionaries in a registry:\n\n\nregistry.dictionaries()\n\n\n\n\nAdd/get a dictionary in a registry:\n\n\n# dictionary is ot type Dictionary by default\ndictionary = registry.get_dict('entity_name')\n\n\n\n\nDelete a dictionary:\n\n\nregistry.del_dict('entity_name')\n\n\n\n\nDelete a registry:\n\n\n# This will automatically delete all related dictionaries\nregistry.delete()\n\n\n\n\nMake a dictionary for an entity\n\n\nfrom __future__ import print_function\nfrom feet.entities.registry import Registry\n\n# Get an entity dictionary\nregistry = Registry.find_or_create('my_registry',\n    key_prefix='test_feet',\n    redis_host='127.0.0.1',\n    redis_port=6379,\n    redis_db=0)\nentity = registry.get_dict('events')\n\n# Load a file that contains a list of entities\ncount = entity.load_file('./test_data/events_ja.txt')\nprint('%d entities imported' % count)\n\n\n\n\nwhere 'events_ja.txt' file contains a list of marketing events with each event\nname on a different line.\n\n\nload_file method returns the number of terms that have been succesfully\nimported.\n\n\nIf you want to deal with different file formats you can inherit from Dictionary\nand override get_entities method. It could be as simple as:\n\n\nfrom __future__ import print_function\nfrom feet.entities.registry import Registry\nfrom feet.entities.dictionary import Dictionary\n\nclass MyDictionary(Dictionary):\n    def get_entities(self, entities_file):\n        handle = open(entities_file, \nr\n)\n        for entity in handle.readlines():\n          yield entity\n\n# Get an entity dictionary\nregistry = Registry.find_or_create('my_registry',\n    dict_class=MyDictionary,\n    key_prefix='test_feet',\n    redis_host='127.0.0.1',\n    redis_port=6379,\n    redis_db=0)\nentity = registry.get_dict('my_entity')\n\n# Load a file that contains a list of entities\ncount = entity.load_file('my_formatted_file.my')\nprint('%d entities imported' % count)\n\n\n\n\nThis will allow you to build your own importers for different formats e.g. \nJSON, CSV, XML, RDF etc.\n\n\nA CSV import tool is available as CSVDictionary in feet.entities.dictionary:\n\n\nfrom __future__ import print_function\nfrom feet.entities.dictionary import CSVDictionary\n\nregistry = Registry.find_or_create('my_registry',\n  dict_class=CSVDictionary)\ncities = registry.get_dict('cities')\ncount = cities.load_file('./test_data/world-cities.csv') \n\n\n\n\nExtract entities from a text with a dictionary\n\n\nfrom __future__ import print_function\nfrom feet.entities.extractor import Extractor\nfrom feet.entities.dictionary import CSVDictionary\n\nregistry = Registry.find_or_create('my_registry',\n  dict_class=CSVDictionary)\ncities = registry.get_dict('cities')\ncount = cities.load_file('./test_data/world-cities.csv') \n\n# Get an entity extractor engine\n# Specify a grammar to extract chunks of candidates for 'NE' Named Entities\nextractor = Extractor(\n    ref_dictionary=cities,\n    grammar='NE : {\nNNP|NNPS|NN\n*\nDT\n?\nNNP|NNPS|JJ|NNS|NN\n+}')\n# Ask for entities from a text (it must be UTF8 encoded)\nresult = extractor.extract(utf8_encoded_text)\n\n# Display results\nentities = []\nfor element in results[0]:\n    if element['entity_found'] == 1:\n      entities = list(set(entities).union(element['entity_candidates']))\nprint(entities)\n\n\n\n\nBonus: Extracting dates in Japanese\n\n\nfrom feet.entities.jptools import JAParser\n\ndates = JAParser().extract_dates(utf8_encoded_text)\n\n\n\n\nDeploy with Docker\n\n\nMake sure the REDIS_HOST in your configuration file (see Quick start\nconfiguration section) is set to the name of redis service defined in the\ndocker_compose.yml file. For example:\n\n\nREDIS_HOST=redis\n\n\n\n\nDouble check that SERVER_PORT matches the open port of your container as\ndefined in docker-compose.yml file. For example:\n\n\nSERVER_PORT=5000\n\n\n\n\nStart a container for development (version of docker-compose \n v1.9.0):\n\n\n$ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up\n\n\n\n\nThe Dockerfile describes an image that includes Neologd dictionary. Installation\nof Neologd takes time and space, however it will provide the best quality in\nterms of entity extraction. You can also rely only on macacb-ipadic-utf8 by\ncommenting this line in Dockerfile:\n\n\nRUN git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git \n cd mecab-ipadic-neologd \n ./bin/install-mecab-ipadic-neologd -y \n\n\n\n\nMake sure that either .env and/or feet.yaml configuration files specify the\nright path to access the dictionary:\n\n\nIn feet.yaml:\n\n\n# Japanese POS Tagger MeCab\nmecab:\n    mecabdict= '/usr/lib/mecab/dic/mecab-ipadic-neologd'\n\n\n\n\nIn .env:\n\n\nMECAB_DICT=/usr/local/lib/mecab/dic/mecab-ipadic-neologd\n\n\n\n\nGetting help\n\n\nTo get help with feet, please contact Romary on romary.dupuis@altarika.com", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-feet", 
            "text": "Fast Entitiy Extraction Tool      Complete documentation coming soon!", 
            "title": "Welcome to feet"
        }, 
        {
            "location": "/#overview", 
            "text": "Feet is a tool for extracting entities from a text according to dictionaries.\nA dictionary gathers terms that are representative of an entity type, e.b. city, country, people or company.  Feet takes benefits of the distributed in-memory database system  Redis .\nSo It's fast and scalable.  The underlying natural language processing is provided by Python NLTK package.\nJapanese has been implemented thanks to the Mecab POS tagger.  On-going work for next version:   better project packaging and documentation  more testing  implement various technics for disambiguition of entities by semantics\nanalysis including the use of thesauri and machine learning.  compliant to JSON API interface  definition of relationships between entities according to grammatical patterns including but not only the definition of intents, facts etc.  additional languages support: Chinese and Korean   As a bonus, there is a function to extract dates from text in Japanese. Next\nversion may feature a multi-lingual dates extraction function.  Last but not the least this is WIP so rely on it at your own risk. We should\nget a reliable version within a few weeks, along with new exciting features.", 
            "title": "Overview"
        }, 
        {
            "location": "/#quick-start", 
            "text": "feet supports Python versions 2.7+ and pypy.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#installing-python", 
            "text": "Install  Python  by downloading an installer appropriate for your system from https://www.python.org/downloads/  and running it.", 
            "title": "Installing Python"
        }, 
        {
            "location": "/#installing-pip", 
            "text": "If you're using a recent version of Python, pip is most likely installed\nby default. However, you may need to upgrade pip to the lasted version:  $ pip install --upgrade pip  If you need to install [pip] for the first time, download [get-pip.py].\nThen run the following command to install it:  $ python get-pip.py", 
            "title": "Installing pip"
        }, 
        {
            "location": "/#quick-start_1", 
            "text": "Check your locals  export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8  Setup Redis  Use of  Redis  is mandatory and v3+ is recommended.   Setup Mecab for Japanese  Setup  MeCaB  You can either use ipadic-utf8 dictionary or neologd dictionary:   apt-get install mecab-ipadic-utf8  Setup  neologd dictionary   Setup Feet  Download latest version of Feet repository.  $ git clone https://github.com/Altarika/feet.git\n$ cd feet\n$ python setup.py install  or from pip (TODO):  $ pip install feet  For development  Create a virtualenv and install dependencies  $ virtualenv venv\n$ source venv/bin/activate  $ echo $(pwd)   project_venv/lib/python2.7/site-packages/feet.pth  Install Python dependencies  $ pip install -r requirements.txt  Check the changelog:  $ git log --oneline --decorate --color  Setup NLTK  Depending on the languages you want to use you have to download the necessary\ndata for NLTK to support them. Please see the documentation of  NLTK .\nWe are using NLTK version 3.0.  $ python -m nltk.downloader averaged_perceptron_tagger maxent_ne_chunker maxent_treebank_pos_tagger punkt words  Configuration  Setup your environment parameters in feet.yaml after copying config/feet_example.yaml  You can locate the configuration file at: \n/etc/feet.yml\n~/.feet.yaml\nconf/feet.yaml  Content of configuration file:  # Basic Flags\ndebug: true\n\n# Logging Information\nlogfile: 'feet.log'\nloglevel: 'DEBUG'\n\n# Timeout processing\ntimeout: 180\n\n# Redis database Information\ndatabase:\n    host: localhost\n    port: 6379\n    prefix: feet\n\n# API Server\nserver:\n    host: 127.0.0.1\n    port: 8000\n\n# Japanese POS Tagger MeCab\nmecab:\n    mecabdict= 'usr/local/lib/mecab/dic/mecab-ipadic-neologd'  You can also use a .env file:  MECAB_DICT=/usr/local/lib/mecab/dic/mecab-ipadic-neologd\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_DICT_DB=0\nREDIS_PREFIX=feet\nDEBUG=True\nSERVER_HOST=localhost\nSERVER_PORT=8888\nLOG_FILE=feet.log\nLOG_LEVEL=INFO\nTIMEOUT=180  If both a YAML and a .env file are available, YAML file will override common\nenvironment variables.  Testing  Run the tests to make sure everything is OK.  $ pip install ./requirements/test.txt\n$ nosetests -v --with-coverage --cover-package=feet --cover-inclusive --cover-erase tests ./feet/www/tests/  or with Tornado testing tools:  $ python -m tornado.testing  discover  or with setuptools  $ python setup.py test", 
            "title": "Quick start"
        }, 
        {
            "location": "/#read-the-doc", 
            "text": "You can generate a documentation with mkdocs tool.  Install the mkdocs package using pip:  $ pip install mkdocs  Install Yeti theme from mkdocs-bootswatch:   $ pip install mkdocs-bootswatch  You should now have the mkdocs command installed on your system. \nRun mkdocs --version to check that everything worked okay.  $ mkdocs --version\nmkdocs, version 0.15.2  Launch the documentation server:  $ mkdocs serve  Then open your browser on http://127.0.0.1:8000/", 
            "title": "Read the doc"
        }, 
        {
            "location": "/#cli", 
            "text": "Follow the Quick Start instructions. Make sure a redis-server is running.\nMake and update your favorite configuration file (.env or yml).  From feet directory you can use  $ ./bin/feet  command or you can directly\ncall  $ feet  if you have been through complete installation via setuptools.  Load  entity file with CLI:  $ feet load --registry=my_registry --entity=country --csv=./tests/test_data/countries_en.csv  Drop  list of terms for company with CLI:  $ feet drop --registry=my_registry --entity=country  Extract  entities from a text:  $ feet extract --registry=my_registry --entity=country --grammar= NE : { NNP|NNPS|NN * DT ? NNP|NNPS|JJ|NNS|NN +}  --path=./tests/test_data/english_text_long.txt   or  $ feet extract --registry=my_registry --entity=country --grammar= NE : { NNP|NNPS|NN * DT ? NNP|NNPS|JJ|NNS|NN +}  --text= I want to buy flight tickets for Japan", 
            "title": "CLI"
        }, 
        {
            "location": "/#http-api-server-tools", 
            "text": "Follow the Quick Start instructions. Make sure a redis-server is running.\nMake and update your favorite configuration file (.env or yml).  From feet directory you can use  $ ./bin/feet  command or you can directly\ncall  $ feet  if you have been through complete installation via setuptools.  Feet run !  Launch the server:  $ feet run --host=127.0.0.1 --port=8888   Feet proposes a Restful API. It's easy to guess where you are from the url. In order\nto manage your entities you can group them into different databases,\nprefixes and registries. The database identifier follows Redis rule. A prefix and a registry can be any\nalphanumeric urlencoded characters strings.  Get list of registries  curl -H  Accept: application/json  -X GET http://localhost:8888/database/ database /prefix/ prefix_name /registries/\n--  200 { registries :[ registry1 , registry2 ]}  Add a registry  curl -H  Content-Type: application/json  -X POST http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /\n--  200 OK  Delete a registry  curl -H  Content-Type: application/json  -X DELETE http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /\n--  200 OK  Get list of registered entities  curl -H  Accept: application/json  -X GET http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/  Example:  http://localhost:8888/database/0/prefix/geographic/registry/my_registry/entities/\n--  200 { entities :[ city , country ]}  Add an entity  curl -H  Content-Type: application/json  -X POST http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /\n--  200 OK  Delete an entity  curl -H  Content-Type: application/json  -X DELETE http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /\n--  200 OK  Getting an entity provides the list of languages supported by the entity  curl -H  Accept: application/json  -X GET http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /\n--  200 { languages :[ english ]}  Add a language for an entity  curl -H  Content-Type: application/json  -X POST http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /\n--  200 OK  The list of language identifiers that we use comes from NLTK. You must follow\nthis list if you want feet to branch correctly into NLTK.   Delete a language for an entity  curl -H  Content-Type: application/json  -X DELETE http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /\n--  200 OK  Geting a language provides the number of terms for this language  curl -H  Accept: application/json  -X GET http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /\n--  200 { count :249}  This allows to get the total number of terms for a language.  Change the name of language  curl -H  Content-Type: application/json  -X PUT -d '{ new_name :  english }'\nhttp://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /\n--  200 OK   Create/add list of terms  curl -H  Content-Type: application/json  -X POST/PUT -d '{ entities : [ Paris , Tokyo ]}' http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /terms/\n--  200 OK  Get list of terms for an entity and a language  curl -H  Accept: application/json  -X GET -d '{ page :0, count :10}' http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /terms/?page=0 count=10\n--  200 { terms :[ Paris , Tokyo ]}  Delete all terms for an entity and a language  curl -H  Content-Type: application/json  -X DELETE -d '{ entities : [ Paris ]}' http://localhost:8888/database/ database /prefix/ prefix_name /entities/ entity_name /languages/ lang_id /terms/\n--  200 OK  Get a term  curl -H  Accept: application/json  -X GET http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /terms/Tokyo/\n--  200 Tokyo  Add a term  curl  Content-Type: application/json  -X POST  http://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /terms/Tokyo/\n--  200 OK  Delete a term  curl  Content-Type: application/json  -X DELETE \nhttp://localhost:8888/database/ database /prefix/ prefix_name /registries/ registry /entities/ entity_name /lang/ lang_id /terms/Tokyo/\n--  200 OK  Extract entities from a text  curl -H  Accept: application/json  -H  Content-Type: application/json  -X POST -d '{ test : I am looking for tickets for Tokyo in Japan ,  grammar : NE : { NNP|NNPS|NN * DT ? NNP|NNPS|JJ|NNS|NN +} }'\nhttp://localhost:8888/database/0/prefix/geographic/entities/city/languages/english/extract/\n--  200 { result :[ Tokyo ]}  TODO: Search for entities  curl -H  Accept: application/json  -H  Content-Type: application/json  -X GET\nhttp://localhost:8888/database/0/prefix/geographic/entities/city/languages/english/search?q=Tok page=0 count=10\n--  200 { result :[ Tokyo ]}", 
            "title": "HTTP API server tools"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Follow the quick start installation.  Using Feet relies on three classes:   Registry  Dictionary  Extractor   (Don't forget to run a Redis server)", 
            "title": "How to use"
        }, 
        {
            "location": "/#key-prefix", 
            "text": "Before talking about the classes it's important to explain the concept of key\nprefix. As we are using a Redis database to store all data they can be organized\nby a key prefix. It means that all keys used to store information about\nregistries, dictionaries etc. will be prefixed. It provides you with a first\nlevel of organisation for your data.  +------------------------------------+\n|  +-------------------------------+ |\n|  |  +--------------------------+ | |\n|  |  |                          | | |\n|  |  |     Term                 | | |\n|  |  |                          | | |\n|  |  | Entity/Dictionary        | | |\n|  |  +--------------------------+ | |\n|  |Registry                       | |\n|  +-------------------------------+ |\n|Key prefix                          |\n+------------------------------------+", 
            "title": "Key prefix"
        }, 
        {
            "location": "/#registries", 
            "text": "Each registry manages a list of dictionaries. It's a second level of\norganisation after key prefixes.  Get the list of registries for a specific key prefix:  from feet.entities.registry import Registry\n\nregistries = Registry.list(key_prefix='my_prefix')  Add a registry:  from feet.entities.registry import Registry\n\nregistry = Registry.find_or_create('my_registry',\n    key_prefix='my_prefix',\n    redis_host='127.0.0.1',\n    redis_port=6379,\n    redis_db=0)  Get the list of dictionaries in a registry:  registry.dictionaries()  Add/get a dictionary in a registry:  # dictionary is ot type Dictionary by default\ndictionary = registry.get_dict('entity_name')  Delete a dictionary:  registry.del_dict('entity_name')  Delete a registry:  # This will automatically delete all related dictionaries\nregistry.delete()", 
            "title": "Registries"
        }, 
        {
            "location": "/#make-a-dictionary-for-an-entity", 
            "text": "from __future__ import print_function\nfrom feet.entities.registry import Registry\n\n# Get an entity dictionary\nregistry = Registry.find_or_create('my_registry',\n    key_prefix='test_feet',\n    redis_host='127.0.0.1',\n    redis_port=6379,\n    redis_db=0)\nentity = registry.get_dict('events')\n\n# Load a file that contains a list of entities\ncount = entity.load_file('./test_data/events_ja.txt')\nprint('%d entities imported' % count)  where 'events_ja.txt' file contains a list of marketing events with each event\nname on a different line.  load_file method returns the number of terms that have been succesfully\nimported.  If you want to deal with different file formats you can inherit from Dictionary\nand override get_entities method. It could be as simple as:  from __future__ import print_function\nfrom feet.entities.registry import Registry\nfrom feet.entities.dictionary import Dictionary\n\nclass MyDictionary(Dictionary):\n    def get_entities(self, entities_file):\n        handle = open(entities_file,  r )\n        for entity in handle.readlines():\n          yield entity\n\n# Get an entity dictionary\nregistry = Registry.find_or_create('my_registry',\n    dict_class=MyDictionary,\n    key_prefix='test_feet',\n    redis_host='127.0.0.1',\n    redis_port=6379,\n    redis_db=0)\nentity = registry.get_dict('my_entity')\n\n# Load a file that contains a list of entities\ncount = entity.load_file('my_formatted_file.my')\nprint('%d entities imported' % count)  This will allow you to build your own importers for different formats e.g. \nJSON, CSV, XML, RDF etc.  A CSV import tool is available as CSVDictionary in feet.entities.dictionary:  from __future__ import print_function\nfrom feet.entities.dictionary import CSVDictionary\n\nregistry = Registry.find_or_create('my_registry',\n  dict_class=CSVDictionary)\ncities = registry.get_dict('cities')\ncount = cities.load_file('./test_data/world-cities.csv')", 
            "title": "Make a dictionary for an entity"
        }, 
        {
            "location": "/#extract-entities-from-a-text-with-a-dictionary", 
            "text": "from __future__ import print_function\nfrom feet.entities.extractor import Extractor\nfrom feet.entities.dictionary import CSVDictionary\n\nregistry = Registry.find_or_create('my_registry',\n  dict_class=CSVDictionary)\ncities = registry.get_dict('cities')\ncount = cities.load_file('./test_data/world-cities.csv') \n\n# Get an entity extractor engine\n# Specify a grammar to extract chunks of candidates for 'NE' Named Entities\nextractor = Extractor(\n    ref_dictionary=cities,\n    grammar='NE : { NNP|NNPS|NN * DT ? NNP|NNPS|JJ|NNS|NN +}')\n# Ask for entities from a text (it must be UTF8 encoded)\nresult = extractor.extract(utf8_encoded_text)\n\n# Display results\nentities = []\nfor element in results[0]:\n    if element['entity_found'] == 1:\n      entities = list(set(entities).union(element['entity_candidates']))\nprint(entities)", 
            "title": "Extract entities from a text with a dictionary"
        }, 
        {
            "location": "/#bonus-extracting-dates-in-japanese", 
            "text": "from feet.entities.jptools import JAParser\n\ndates = JAParser().extract_dates(utf8_encoded_text)", 
            "title": "Bonus: Extracting dates in Japanese"
        }, 
        {
            "location": "/#deploy-with-docker", 
            "text": "Make sure the REDIS_HOST in your configuration file (see Quick start\nconfiguration section) is set to the name of redis service defined in the\ndocker_compose.yml file. For example:  REDIS_HOST=redis  Double check that SERVER_PORT matches the open port of your container as\ndefined in docker-compose.yml file. For example:  SERVER_PORT=5000  Start a container for development (version of docker-compose   v1.9.0):  $ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up  The Dockerfile describes an image that includes Neologd dictionary. Installation\nof Neologd takes time and space, however it will provide the best quality in\nterms of entity extraction. You can also rely only on macacb-ipadic-utf8 by\ncommenting this line in Dockerfile:  RUN git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git   cd mecab-ipadic-neologd   ./bin/install-mecab-ipadic-neologd -y   Make sure that either .env and/or feet.yaml configuration files specify the\nright path to access the dictionary:  In feet.yaml:  # Japanese POS Tagger MeCab\nmecab:\n    mecabdict= '/usr/lib/mecab/dic/mecab-ipadic-neologd'  In .env:  MECAB_DICT=/usr/local/lib/mecab/dic/mecab-ipadic-neologd", 
            "title": "Deploy with Docker"
        }, 
        {
            "location": "/#getting-help", 
            "text": "To get help with feet, please contact Romary on romary.dupuis@altarika.com", 
            "title": "Getting help"
        }, 
        {
            "location": "/changelog/", 
            "text": "Changelog\n\n\n\n\nWIP\n\n\nFirst stable version coming soon !", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#wip", 
            "text": "First stable version coming soon !", 
            "title": "WIP"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nFeet is open source. If you would like to contribute, you can do so in the following ways:\n\n\n\n\nMethodology\n\n\n\n\nAdd issues or bugs to the bug tracker: \nhttps://github.com/altarika/feet/issues\n\n\nWork on a card on the dev board: \nhttps://waffle.io/altarika/feet\n\n\nCreate a pull request in Github: \nhttps://github.com/altarika/feet/pulls\n\n\n\n\nThe repository is set up in a typical production/release/development cycle as described in \nA Successful Git Branching Model\n. \n\n\n\n\n\n\nSelect a card from the \ndev board\n - preferably one that is \"ready\" then move it to \"in-progress\".\n\n\n\n\n\n\nCreate a branch off of develop called \"feature-[feature name]\", work and commit into that branch.\n\n\n$ git checkout -b feature-myfeature develop\n\n\n\n\n\n\n\nOnce you are done working (and everything is tested), push your branch and launch a Pull Request (PR). Make sure you have rebased your branch on the latest version of develop branch.\n\n\n\n\n\n\nCode quality\n\n\nUse Flake8.\n\n\nContinuous Integration\n\n\nTravisCI configuration.\n\n\nMaintainers\n\n\n\n\nRomary Dupuis: \n@romaryd", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Feet is open source. If you would like to contribute, you can do so in the following ways:", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#methodology", 
            "text": "Add issues or bugs to the bug tracker:  https://github.com/altarika/feet/issues  Work on a card on the dev board:  https://waffle.io/altarika/feet  Create a pull request in Github:  https://github.com/altarika/feet/pulls   The repository is set up in a typical production/release/development cycle as described in  A Successful Git Branching Model .     Select a card from the  dev board  - preferably one that is \"ready\" then move it to \"in-progress\".    Create a branch off of develop called \"feature-[feature name]\", work and commit into that branch.  $ git checkout -b feature-myfeature develop    Once you are done working (and everything is tested), push your branch and launch a Pull Request (PR). Make sure you have rebased your branch on the latest version of develop branch.", 
            "title": "Methodology"
        }, 
        {
            "location": "/contributing/#code-quality", 
            "text": "Use Flake8.", 
            "title": "Code quality"
        }, 
        {
            "location": "/contributing/#continuous-integration", 
            "text": "TravisCI configuration.", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/contributing/#maintainers", 
            "text": "Romary Dupuis:  @romaryd", 
            "title": "Maintainers"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \nLesser\n General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\nwork based on the library\n and a \nwork that uses the library\n.  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \nthis License\n).\nEach licensee is addressed as \nyou\n.\n\n  A \nlibrary\n means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \nLibrary\n, below, refers to any such software library or work\nwhich has been distributed under these terms.  A \nwork based on the\nLibrary\n means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \nmodification\n.)\n\n  \nSource code\n for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \nwork that uses the Library\n.  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \nwork that uses the Library\n with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \nwork that uses the\nlibrary\n.  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \nwork that uses the Library\n uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \nwork that uses the Library\n with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \nwork that\n    uses the Library\n, as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \nwork that uses the\nLibrary\n must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\nany later version\n, you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \nAS IS\n WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\ncopyright\n line and a pointer to where the full notice is found.\n\n    \none line to give the library's name and a brief idea of what it does.\n\n    Copyright (C) \nyear\n  \nname of author\n\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \ncopyright disclaimer\n for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  \nsignature of Ty Coon\n, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the  Lesser  General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a work based on the library  and a  work that uses the library .  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called  this License ).\nEach licensee is addressed as  you .\n\n  A  library  means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The  Library , below, refers to any such software library or work\nwhich has been distributed under these terms.  A  work based on the\nLibrary  means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term  modification .)\n\n   Source code  for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a  work that uses the Library .  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a  work that uses the Library  with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a  work that uses the\nlibrary .  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a  work that uses the Library  uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a  work that uses the Library  with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable  work that\n    uses the Library , as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the  work that uses the\nLibrary  must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and any later version , you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY  AS IS  WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the copyright  line and a pointer to where the full notice is found.\n\n     one line to give the library's name and a brief idea of what it does. \n    Copyright (C)  year    name of author \n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a  copyright disclaimer  for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n   signature of Ty Coon , 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!", 
            "title": "License"
        }
    ]
}